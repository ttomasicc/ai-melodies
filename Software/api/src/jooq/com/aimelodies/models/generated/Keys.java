/*
 * This file is generated by jOOQ.
 */
package com.aimelodies.models.generated;


import com.aimelodies.models.generated.tables.Album;
import com.aimelodies.models.generated.tables.AlbumMelody;
import com.aimelodies.models.generated.tables.Artist;
import com.aimelodies.models.generated.tables.FlywaySchemaHistory;
import com.aimelodies.models.generated.tables.Genre;
import com.aimelodies.models.generated.tables.Melody;
import com.aimelodies.models.generated.tables.Shedlock;
import com.aimelodies.models.generated.tables.records.AlbumMelodyRecord;
import com.aimelodies.models.generated.tables.records.AlbumRecord;
import com.aimelodies.models.generated.tables.records.ArtistRecord;
import com.aimelodies.models.generated.tables.records.FlywaySchemaHistoryRecord;
import com.aimelodies.models.generated.tables.records.GenreRecord;
import com.aimelodies.models.generated.tables.records.MelodyRecord;
import com.aimelodies.models.generated.tables.records.ShedlockRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AlbumRecord> ALBUM_PKEY = Internal.createUniqueKey(Album.ALBUM, DSL.name("album_pkey"), new TableField[] { Album.ALBUM.ID }, true);
    public static final UniqueKey<AlbumMelodyRecord> ALBUM_MELODY_PKEY = Internal.createUniqueKey(AlbumMelody.ALBUM_MELODY, DSL.name("album_melody_pkey"), new TableField[] { AlbumMelody.ALBUM_MELODY.ALBUM_ID, AlbumMelody.ALBUM_MELODY.MELODY_ID }, true);
    public static final UniqueKey<ArtistRecord> ARTIST_EMAIL_KEY = Internal.createUniqueKey(Artist.ARTIST, DSL.name("artist_email_key"), new TableField[] { Artist.ARTIST.EMAIL }, true);
    public static final UniqueKey<ArtistRecord> ARTIST_PKEY = Internal.createUniqueKey(Artist.ARTIST, DSL.name("artist_pkey"), new TableField[] { Artist.ARTIST.ID }, true);
    public static final UniqueKey<ArtistRecord> ARTIST_USERNAME_KEY = Internal.createUniqueKey(Artist.ARTIST, DSL.name("artist_username_key"), new TableField[] { Artist.ARTIST.USERNAME }, true);
    public static final UniqueKey<FlywaySchemaHistoryRecord> FLYWAY_SCHEMA_HISTORY_PK = Internal.createUniqueKey(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, DSL.name("flyway_schema_history_pk"), new TableField[] { FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.INSTALLED_RANK }, true);
    public static final UniqueKey<GenreRecord> GENRE_NAME_KEY = Internal.createUniqueKey(Genre.GENRE, DSL.name("genre_name_key"), new TableField[] { Genre.GENRE.NAME }, true);
    public static final UniqueKey<GenreRecord> GENRE_PKEY = Internal.createUniqueKey(Genre.GENRE, DSL.name("genre_pkey"), new TableField[] { Genre.GENRE.ID }, true);
    public static final UniqueKey<MelodyRecord> MELODY_PKEY = Internal.createUniqueKey(Melody.MELODY, DSL.name("melody_pkey"), new TableField[] { Melody.MELODY.ID }, true);
    public static final UniqueKey<ShedlockRecord> SHEDLOCK_PKEY = Internal.createUniqueKey(Shedlock.SHEDLOCK, DSL.name("shedlock_pkey"), new TableField[] { Shedlock.SHEDLOCK.NAME }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AlbumRecord, ArtistRecord> ALBUM__ALBUM_ARTIST_ID_FKEY = Internal.createForeignKey(Album.ALBUM, DSL.name("album_artist_id_fkey"), new TableField[] { Album.ALBUM.ARTIST_ID }, Keys.ARTIST_PKEY, new TableField[] { Artist.ARTIST.ID }, true);
    public static final ForeignKey<AlbumMelodyRecord, AlbumRecord> ALBUM_MELODY__ALBUM_MELODY_ALBUM_ID_FKEY = Internal.createForeignKey(AlbumMelody.ALBUM_MELODY, DSL.name("album_melody_album_id_fkey"), new TableField[] { AlbumMelody.ALBUM_MELODY.ALBUM_ID }, Keys.ALBUM_PKEY, new TableField[] { Album.ALBUM.ID }, true);
    public static final ForeignKey<AlbumMelodyRecord, MelodyRecord> ALBUM_MELODY__ALBUM_MELODY_MELODY_ID_FKEY = Internal.createForeignKey(AlbumMelody.ALBUM_MELODY, DSL.name("album_melody_melody_id_fkey"), new TableField[] { AlbumMelody.ALBUM_MELODY.MELODY_ID }, Keys.MELODY_PKEY, new TableField[] { Melody.MELODY.ID }, true);
    public static final ForeignKey<MelodyRecord, ArtistRecord> MELODY__MELODY_AUTHOR_ID_FKEY = Internal.createForeignKey(Melody.MELODY, DSL.name("melody_author_id_fkey"), new TableField[] { Melody.MELODY.AUTHOR_ID }, Keys.ARTIST_PKEY, new TableField[] { Artist.ARTIST.ID }, true);
    public static final ForeignKey<MelodyRecord, GenreRecord> MELODY__MELODY_GENRE_ID_FKEY = Internal.createForeignKey(Melody.MELODY, DSL.name("melody_genre_id_fkey"), new TableField[] { Melody.MELODY.GENRE_ID }, Keys.GENRE_PKEY, new TableField[] { Genre.GENRE.ID }, true);
}
