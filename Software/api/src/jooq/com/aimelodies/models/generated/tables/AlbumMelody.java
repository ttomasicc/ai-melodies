/*
 * This file is generated by jOOQ.
 */
package com.aimelodies.models.generated.tables;


import com.aimelodies.models.generated.Keys;
import com.aimelodies.models.generated.Public;
import com.aimelodies.models.generated.tables.records.AlbumMelodyRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AlbumMelody extends TableImpl<AlbumMelodyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.album_melody</code>
     */
    public static final AlbumMelody ALBUM_MELODY = new AlbumMelody();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AlbumMelodyRecord> getRecordType() {
        return AlbumMelodyRecord.class;
    }

    /**
     * The column <code>public.album_melody.album_id</code>.
     */
    public final TableField<AlbumMelodyRecord, Long> ALBUM_ID = createField(DSL.name("album_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.album_melody.melody_id</code>.
     */
    public final TableField<AlbumMelodyRecord, Long> MELODY_ID = createField(DSL.name("melody_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private AlbumMelody(Name alias, Table<AlbumMelodyRecord> aliased) {
        this(alias, aliased, null);
    }

    private AlbumMelody(Name alias, Table<AlbumMelodyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.album_melody</code> table reference
     */
    public AlbumMelody(String alias) {
        this(DSL.name(alias), ALBUM_MELODY);
    }

    /**
     * Create an aliased <code>public.album_melody</code> table reference
     */
    public AlbumMelody(Name alias) {
        this(alias, ALBUM_MELODY);
    }

    /**
     * Create a <code>public.album_melody</code> table reference
     */
    public AlbumMelody() {
        this(DSL.name("album_melody"), null);
    }

    public <O extends Record> AlbumMelody(Table<O> child, ForeignKey<O, AlbumMelodyRecord> key) {
        super(child, key, ALBUM_MELODY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<AlbumMelodyRecord> getPrimaryKey() {
        return Keys.ALBUM_MELODY_PKEY;
    }

    @Override
    public List<ForeignKey<AlbumMelodyRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ALBUM_MELODY__ALBUM_MELODY_ALBUM_ID_FKEY, Keys.ALBUM_MELODY__ALBUM_MELODY_MELODY_ID_FKEY);
    }

    private transient Album _album;
    private transient Melody _melody;

    /**
     * Get the implicit join path to the <code>public.album</code> table.
     */
    public Album album() {
        if (_album == null)
            _album = new Album(this, Keys.ALBUM_MELODY__ALBUM_MELODY_ALBUM_ID_FKEY);

        return _album;
    }

    /**
     * Get the implicit join path to the <code>public.melody</code> table.
     */
    public Melody melody() {
        if (_melody == null)
            _melody = new Melody(this, Keys.ALBUM_MELODY__ALBUM_MELODY_MELODY_ID_FKEY);

        return _melody;
    }

    @Override
    public AlbumMelody as(String alias) {
        return new AlbumMelody(DSL.name(alias), this);
    }

    @Override
    public AlbumMelody as(Name alias) {
        return new AlbumMelody(alias, this);
    }

    @Override
    public AlbumMelody as(Table<?> alias) {
        return new AlbumMelody(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AlbumMelody rename(String name) {
        return new AlbumMelody(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AlbumMelody rename(Name name) {
        return new AlbumMelody(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AlbumMelody rename(Table<?> name) {
        return new AlbumMelody(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
